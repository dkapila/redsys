// Generated by CoffeeScript 1.4.0
var S, agentToProject, async, auth, handle_redsys, hat, model, projects, sharejs, updateIfNecessary, valid_file;

sharejs = require("share").server;

projects = {};

hat = require("hat");

async = require("async");

S = require("string");

agentToProject = {};

model = null;

handle_redsys = function(agent, msg) {
  var action;
  action = msg.action;
  if (action === "setProject") {
    if (!(projects[msg.project_id] != null)) {
      return;
    }
    console.log(agent.sessionId, "assigned to ", msg.project_id);
    return agentToProject[agent.headers.cookie] = {
      project: msg.project_id,
      vfs: projects[msg.project_id]
    };
  }
};

updateIfNecessary = function(docName, initValueCallback, callback) {
  console.log("----", docName);
  async.waterfall([
    function(callback) {
      return model.getSnapshot(docName, callback);
    }, function(doc, callback) {
      console.log("doc=", doc);
      return initValueCallback(callback);
    }, function(doc, callback) {
      return model.applyOp(docName, {
        p: 0,
        i: doc
      }, callback());
    }, function(v, callback) {
      console.log("v=", v);
      return callback();
    }
  ], function(err) {
    return console.log(err);
  });
  return callback();
};

valid_file = function(fileName, vfs, callback) {
  return vfs.stat(fileName, {}, callback);
};

auth = function(agent, action) {
  var docName, projectData, readFile, vfs, _ref, _ref1, _ref2;
  if (action.docName === "__REDSYS__") {
    if (action.op != null) {
      handle_redsys(agent, JSON.parse(action.op[0].i));
      return action.reject();
    } else {
      return action.accept();
    }
  }
  if ((_ref = action.name) === "connect") {
    return action.accept();
  }
  if (!(agentToProject[agent.headers.cookie] != null)) {
    return action.reject();
  }
  projectData = agentToProject[agent.headers.cookie];
  if (!S(action.docName).startsWith(projectData.project)) {
    return action.reject();
  }
  docName = action.docName.replace("::", "/").slice(projectData.project.length);
  vfs = projectData.vfs;
  readFile = function(callback) {
    return async.waterfall([
      function(callback) {
        return vfs.readfile(docName, {}, callback);
      }, function(data, callback) {
        var file;
        file = "";
        data.stream.on("data", function(str) {
          return file += str.toString();
        });
        return data.stream.on("end", function() {
          return callback(file);
        });
      }
    ], callback);
  };
  if ((_ref1 = action.type) === "create") {
    console.log("creating..");
    async.waterfall([
      function(callback) {
        return valid_file(docName, vfs, callback);
      }, function(stat, callback) {
        action.accept();
        return callback();
      }, function(callback) {
        console.log("test2");
        return updateIfNecessary(action.docName, readFile, callback);
      }, function(callback) {
        return callback();
      }
    ], function(err) {
      if (err) {
        return action.reject();
      }
    });
    return;
  }
  if ((_ref2 = action.type) === "update" || _ref2 === "read") {
    valid_file(docName, vfs, function(err) {
      if (err) {
        return action.reject();
      }
      return action.accept();
    });
    return;
  }
  console.log("What does ", action.type, "mean?");
  return action.reject();
};

exports.attach = function(app, options) {
  options.auth = auth;
  if (!(model != null)) {
    model = sharejs.createModel(options);
  }
  return sharejs.attach(app, options);
};

exports.createProject = function(vfs, project_id) {
  if (project_id == null) {
    project_id = hat();
  }
  projects[project_id] = vfs;
  return console.log("project " + project_id + " was generated");
};
